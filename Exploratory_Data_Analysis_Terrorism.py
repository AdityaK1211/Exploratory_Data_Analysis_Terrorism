# -*- coding: utf-8 -*-
"""Exploratory_Data_Analysis_Terrorism.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/154zI4mQ072JF8rAK0o2IaZqwhce55sub

# Task 4 - Exploratory Data Analysis - Terrorism
## (Level - Intermediate)

Author : Aditya K. Kataria
Data Science & Business Analytics Internship
GRIP December2020

Aim : Perform 'Exploratory Data Analysis' on dataset 'Global Terrorism'. As a security/defense analyst, try to find
out the hot zone of terrorism.
Dataset : Data can be found at https://bit.ly/2TK5Xn5

What all security issues and insights you can derive by EDA?
"""

# Importing all the important Libraries
import numpy as np
import pandas as pd
import seaborn as sns
import matplotlib.pyplot as plt
from wordcloud import WordCloud
import folium
from folium.plugins import MarkerCluster
# %matplotlib inline

# Loading Dataset
df = pd.read_csv('globalterrorismdb_0718dist.csv', encoding='ISO-8859-1')

# Shape of Dataset
print('Shape:', df.shape)

# Sample Dataset
print(df.head())

# Dataset Columns
print(df.columns)

# Check Missing and Null Values
print(df.isnull().sum())
print("Total number of null values =", df.isnull().sum().sum())

# Dataset Types
print(df.dtypes)

# Dataset Summary
print(df.info())

# Dataset Statistical Description
print(df.describe())

# Renaming the columns 
df.rename(columns={'iyear': 'Year', 'imonth': 'Month', 'iday': 'Day',
                   'extended': 'Extended', 'country_txt': 'Country',
                   'provstate': 'state', 'region_txt': 'Region',
                   'attacktype1_txt': 'AttackType', 'target1': 'Target',
                   'nkill': 'Killed', 'nwound': 'Wounded', 'summary': 'Summary',
                   'gname': 'Group', 'targtype1_txt': 'Target_type',
                   'weaptype1_txt': 'Weapon_type', 'motive': 'Motive'}, inplace=True)

new_df = df[
    ['Year', 'Month', 'Extended', 'Day', 'Country', 'state', 'Region', 'city', 'latitude', 'longitude', 'AttackType',
     'Killed', 'Wounded', 'Target', 'Summary', 'Group', 'Target_type', 'Weapon_type', 'Motive']]

print(new_df.shape)

print(new_df.columns)

"""
## Correlation Analysis Pandas dataframe.corr() is used to find the pairwise correlation of all columns in the 
dataframe. Both NA and null values are automatically excluded. For any non-numeric data type columns in the dataframe 
it is ignored. 
"""
# Correlation Analysis
corr_mat = new_df.corr()
print(corr_mat)

plt.figure(figsize=(8, 6))
sns.heatmap(corr_mat, annot=True)
plt.title('Correlation Analysis')
plt.savefig('correlation.png')
plt.show()

"""
## Covariance Pandas dataframe.cov() is used to compute the pairwise covariance among the series of a DataFrame. 
The returned data frame is the covariance matrix of the columns of the DataFrame. 

Both NA and null values are automatically excluded from the calculation. A threshold can be set for the minimum 
number of observations for each value created. Comparisons with observations below this threshold will be returned as 
NaN. 
"""
# Covariance Analysis
cov_mat = new_df.cov()
print(cov_mat)

fig, axes = plt.subplots(1, 1, figsize=(8, 6))
sns.heatmap(cov_mat, annot=True)
plt.title('Covariance')
plt.savefig('covariance.png')
plt.show()

new_df.hist(figsize=(20, 10))

# fig = px.choropleth(new_df, locations='Country', locationmode='country names',
#                    color='Year', hover_name='Country', projection='orthographic',
#                    labels={'Year': 'Attacks'})
# fig.show()

attackType = new_df['AttackType'].unique()
text = ""
for word in attackType:
    text = text + " " + word

wordcloud = WordCloud(width=480, height=480, background_color="white").generate(text)

# plot the WordCloud image
plt.figure(figsize=(8, 8))
plt.imshow(wordcloud, interpolation="bilinear")
plt.axis("off")
plt.margins(x=0, y=0)
plt.savefig('wordCloud.png')
plt.show()

Year = new_df.Year.value_counts().to_dict()
rate = ((Year[2017] - Year[1970]) / Year[2017]) * 100
print(Year[1970], 'attacks happened in 1970 ')
print(Year[2017], 'attacks happened in 2017')
print('Total number of attacks from 1970 has increased by', np.round(rate, 0), '% till 2017')

# Top 10 Countries with most attacks
print('Top 10 Countries with most attacks')
print('-----------------------------------')
print(new_df['Country'].value_counts().head(10))

# Top Countries affected by Terror Attacks
plt.subplots(figsize=(18, 10))
sns.barplot(new_df['Country'].value_counts()[:10].index, new_df['Country'].value_counts()[:10].values, palette='rocket')
plt.xlabel('Countries')
plt.ylabel('Count')
plt.xticks(rotation=90)
plt.title('Top Countries Affected')
plt.savefig('top10_Countries.png')
plt.show()

print('Top 10 Cities with the most attacks')
print('-----------------------------------')
print(new_df['city'].value_counts().head(10))

# Top Cities affected by Terror Attacks
plt.subplots(figsize=(18, 10))
sns.barplot(new_df['city'].value_counts()[:10].index, new_df['city'].value_counts()[:10].values, palette='rocket')
plt.xlabel('Cities')
plt.ylabel('Count')
plt.xticks(rotation=90)
plt.title('Top Cities Affected')
plt.savefig('top10_Cities.png')
plt.show()

print('Top 10 Regions with the most attacks')
print('-----------------------------------')
print(new_df['Region'].value_counts())

plt.subplots(figsize=(15, 5))
sns.countplot('Region', data=new_df, palette='inferno', order=new_df['Region'].value_counts().index)
plt.xticks(rotation=90)
plt.xlabel('Regions')
plt.title('Number Of Terrorist Activities By Region')
plt.savefig('top_Regions.png')
plt.show()

pd.crosstab(new_df.Year, new_df.Region).plot(kind='area', figsize=(20, 10))
plt.ylabel('Number of Attacks')
plt.title('Terrorist Activities by Region in each Year')
plt.savefig('yearly_RegionWiseIncrease.png')
plt.show()

data_after = new_df[new_df['Year'] >= 2001]
fig, ax = plt.subplots(figsize=(15, 10), nrows=2, ncols=1)
ax[0] = pd.crosstab(new_df.Year, new_df.Region).plot(ax=ax[0])
ax[0].set_title('Change in Regions per Year')
ax[0].legend(loc='center left', bbox_to_anchor=(1, 0.5))
ax[0].vlines(x=2001, ymin=0, ymax=7000, colors='red', linestyles='--')

pd.crosstab(data_after.Year, data_after.Region).plot.bar(stacked=True, ax=ax[1])
ax[1].set_title('After Declaration of War on Terror (2001-2017)')
ax[1].legend(loc='center left', bbox_to_anchor=(1, 0.5))
plt.savefig('yearly_RegionwiseChange.png')
plt.show()

fig, axes = plt.subplots(figsize=(16, 11), nrows=1, ncols=2)
sns.barplot(x=new_df['Country'].value_counts()[:20].values, y=new_df['Country'].value_counts()[:20].index,
            ax=axes[0], palette='magma');
axes[0].set_title('Terrorist Attacks per Country')
sns.barplot(x=new_df['Region'].value_counts().values, y=new_df['Region'].value_counts().index,
            ax=axes[1], palette='magma_r')
axes[1].set_title('Terrorist Attacks per Region')
fig.tight_layout()
plt.savefig('terroristAttacks_Countries_Regions.png')
plt.show()

print('Country with Highest Terrorist Attacks:', new_df['Country'].value_counts().index[0])
print('Regions with Highest Terrorist Attacks:', new_df['Region'].value_counts().index[0])
print('Maximum people killed in an attack are:', new_df['Killed'].max(), 'that took place in',
      new_df.loc[df['Killed'].idxmax()].Country)

# Years with most attacks
print('Year with the most attacks')
print('-----------------------------------')
print(new_df['Year'].value_counts().head(10))

print("Year with the most attacks:", new_df['Year'].value_counts().idxmax())

plt.subplots(figsize=(20, 10))
sns.countplot('Year', data=new_df, palette='RdYlGn_r', edgecolor=sns.color_palette("YlOrBr", 10))
plt.xticks(rotation=90)
plt.title('Number Of Terrorist Activities Each Year')
plt.savefig('terroristActivities_Years.png')
plt.show()

# Months with most attacks
print('Month with the most attacks')
print('-----------------------------------')
print(new_df['Month'].value_counts().head(12))

"""### Top 10 Groups with most attacks"""

print("Top 10 Group with the most attacks")
print('-----------------------------------')
print(new_df['Group'].value_counts().head(10))

print("Group with the most attacks:", new_df['Group'].value_counts().index[1])

# Top Groups with the most Terror Attacks
plt.subplots(figsize=(18, 10))
sns.barplot(new_df['Group'].value_counts()[:10].index, new_df['Group'].value_counts()[:10], palette='rocket')
plt.title('Groups with the most Terror Attacks')
plt.xlabel('Groups')
plt.ylabel('Count')
plt.xticks(rotation=90)
plt.savefig('top10_TerroristGroups.png')
plt.show()

# Most Attack Types
print("Most Attack Types")
print('-----------------------------------')
print(new_df['AttackType'].value_counts())

plt.figure(figsize=(16, 8))
sns.countplot(new_df['AttackType'], order=new_df['AttackType'].value_counts().index,
              palette='hot')
plt.xticks(rotation=90)
plt.xlabel('Method')
plt.title('Method of Attack')
plt.savefig('top_AttackTypes.png')
plt.show()

# Most Weapon Types
print("Most Weapon Types")
print('-----------------------------------')
print(new_df['Weapon_type'].value_counts())

plt.figure(figsize=(16, 8))
sns.countplot(new_df['Weapon_type'], order=new_df['Weapon_type'].value_counts().index,
              palette='hot')
plt.xticks(rotation=90)
plt.xlabel('Weapon')
plt.title('Type of Weapons')
plt.savefig('top_WeaponTypes.png')
plt.show()

# Most Target Types
print("Most Target Types")
print('-----------------------------------')
print(new_df['Target_type'].value_counts())

plt.figure(figsize=(16, 8))
sns.countplot(new_df['Target_type'], order=new_df['Target_type'].value_counts().index,
              palette='magma')
plt.xticks(rotation=90)
plt.xlabel('Type')
plt.title('Type of Target')
plt.savefig('top_TargetTypes.png')
plt.show()

df_region = pd.crosstab(new_df.Year, new_df.Target_type)
df_region.plot(color=sns.color_palette('Set2', 12))
fig = plt.gcf()
fig.set_size_inches(16, 10)
plt.title('Change of Target Types over Years')
plt.savefig('yearly_TargetTypeChange.png')
plt.show()

fig, axes = plt.subplots(figsize=(16, 11), nrows=1, ncols=2)
sns.barplot(y=new_df['Group'].value_counts()[1:12].index, x=new_df['Group'].value_counts()[1:12].values, ax=axes[0],
            palette='cubehelix')
axes[0].set_title('Most Active Terrorist Organizations')

# Most affected targets
sns.barplot(y=df['Target_type'].value_counts().index, x=df['Target_type'].value_counts().values, ax=axes[1],
            palette='tab10')
axes[1].set_title('Most Affected Targets')
fig.tight_layout()
plt.show()

fig, ax = plt.subplots(figsize=(18, 7), nrows=1, ncols=2)
ax[0] = new_df[new_df['Extended'] == 1].groupby('AttackType').count()['Extended'].sort_values().plot.barh(color='green',
                                                                                                          ax=ax[0])
ax[1] = new_df[new_df['Extended'] == 0].groupby('AttackType').count()['Extended'].sort_values().plot.barh(
    color='purple', ax=ax[1])
ax[0].set_title('Number of Extended Attacks')
ax[0].set_ylabel('Method')
ax[1].set_title('Number of Unextended Attacks')
ax[1].set_ylabel('Method')
plt.tight_layout()
plt.show()

filterYear = new_df['Year'] == 1970
filterData = new_df[filterYear]  # filter data
reqFilterData = filterData.loc[:, 'city':'longitude']
reqFilterData = reqFilterData.dropna()
reqFilterDataList = reqFilterData.values.tolist()

map = folium.Map(location=[0, 30], tiles='CartoDB positron', zoom_start=2)
# Clustered Marker
markerCluster = folium.plugins.MarkerCluster().add_to(map)
for point in range(0, len(reqFilterDataList)):
    folium.Marker(location=[reqFilterDataList[point][1], reqFilterDataList[point][2]],
                  popup=reqFilterDataList[point][0]).add_to(markerCluster)
map

killData = new_df.loc[:, 'Killed']
print('Number of people killed by terror attack:', int(sum(killData.dropna())))

attackData = new_df.loc[:, 'AttackType']
# attackData
typeKillData = pd.concat([attackData, killData], axis=1)

typeKillFormatData = typeKillData.pivot_table(columns='AttackType', values='Killed', aggfunc='sum')
typeKillFormatData

d = new_df.groupby(['Year', 'Region'])['Killed'].sum()
plot_df = d.unstack('Region').loc[:]
plot_df.index = pd.PeriodIndex(plot_df.index.tolist(), freq='A')
plot_df.plot(figsize=(15, 8), color=sns.color_palette('Set2', 12))
plt.xlabel("Year")
plt.ylabel("Killed")
plt.title('Region wise Killed each Year')
plt.savefig('yearly_RegionwiseKilled.png')

d = new_df.groupby(['Year', 'Region'])['Wounded'].sum()
plot_df = d.unstack('Region').loc[:]
plot_df.index = pd.PeriodIndex(plot_df.index.tolist(), freq='A')
plot_df.plot(figsize=(15, 8), color=sns.color_palette('Set2', 12))
plt.xlabel("Year")
plt.ylabel("Wounded")
plt.title('Region wise Wounded each Year')
plt.savefig('yearly_RegionwiseWounded.png')

# Top 10 Countries with least attacks
print('Top 10 Countries with least attacks')
print('-----------------------------------')
print(new_df['Country'].value_counts().tail(10))

# Top Countries affected by Terror Attacks
plt.subplots(figsize=(18, 10))
sns.barplot(new_df['Country'].value_counts()[-10:].index, new_df['Country'].value_counts()[-10:].values,
            palette='rocket')
plt.xlabel('Countries')
plt.ylabel('Count')
plt.xticks(rotation=90)
plt.title('Top Safe Countries')
plt.savefig('top10_SafeCountries.png')
plt.show()

# Top 10 Cities with least attacks
print('Top 10 Cities with least attacks')
print('-----------------------------------')
print(new_df['city'].value_counts().tail(10))

# Top Cities affected by Terror Attacks
plt.subplots(figsize=(18, 10))
sns.barplot(new_df['city'].value_counts()[-10:].index, new_df['city'].value_counts()[-10:].values, palette='rocket')
plt.xlabel('Cities')
plt.ylabel('Count')
plt.xticks(rotation=90)
plt.title('Top Safe Cities')
plt.savefig('top10_SafeCities.png')
plt.show()

# Least Affected
print('Region with least terror attacks is', new_df['Region'].value_counts().idxmin())
print('Country with least terror attacks is', new_df['Country'].value_counts().idxmin())
print('City with least terror attacks is', new_df['city'].value_counts().idxmin())
print('Year with least terror attacks is', new_df['Year'].value_counts().idxmin())

# Most Affected
print('Region with most terror attacks is', new_df['Region'].value_counts().idxmax())
print('Country with most terror attacks is', new_df['Country'].value_counts().idxmax())
print('City with most terror attacks is', new_df['city'].value_counts().index[1])
print('Year with most terror attacks is', new_df['Year'].value_counts().idxmax())

# Terror Group
print('Most active terror group is', new_df['Group'].value_counts().index[1])
print('Least active terror group is', new_df['Group'].value_counts().idxmin())

# Attack and Target Type
print('Most affected attack type is', new_df['AttackType'].value_counts().idxmax())
print('Most affected target is', new_df['Target_type'].value_counts().idxmax())
print('Most used weapon is', new_df['Weapon_type'].value_counts().idxmax())

print()
print('Least affected attack type is', new_df['AttackType'].value_counts().idxmin())
n = len(new_df['Target_type'].value_counts()) - 1
print('Least affected target is', new_df['Target_type'].value_counts().index[n - 1])
print('Least used weapon is', new_df['Weapon_type'].value_counts().idxmin())
